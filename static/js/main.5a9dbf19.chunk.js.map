{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["EditButton","edit","useState","hover","setHover","version","id","xmlns","x","y","width","height","viewBox","opacity","onClick","onMouseEnter","onMouseLeave","d","ApproveButton","approve","App","newTodo","setNewTodo","editValue","setEditValue","todos","setTodos","setEdit","error","setError","useEffect","console","log","Container","InputGroup","style","marginTop","Input","invalid","value","onChange","e","target","length","placeholder","InputGroupAddon","addonType","Button","findIndex","v","name","prev","concat","checked","backgroundColor","color","fontSize","sort","a","b","localeCompare","map","t","i","display","justifyItems","alignItems","gridTemplateColumns","minHeight","borderBottom","borderTop","className","justifySelf","onChangeCapture","k","index","type","htmlFor","close","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a9dbf19.chunk.js","sourcesContent":["import {Button, Container, Input, InputGroup, InputGroupAddon} from \"reactstrap\";\nimport \"./App.css\"\nimport {useEffect, useState} from \"react\";\n\nfunction App() {\n\n    const [newTodo, setNewTodo] = useState(\"\");\n    const [editValue, setEditValue] = useState(\"\");\n    const [todos, setTodos] = useState([]);\n    const [edit, setEdit] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        console.log(todos);\n    }, [todos])\n\n    return (\n        <Container>\n            <InputGroup style={{marginTop: \"10px\"}}>\n                <Input  invalid={!!error} value={newTodo} onChange={(e) => {\n                    setError(null);\n                    if (e.target.value.length < 20){\n                        setNewTodo(e.target.value);\n                    }\n                }}\n                       placeholder=\"Название дела\"/>\n                <InputGroupAddon addonType={\"append\"}>\n                    <Button onClick={() => {\n                        if (todos.findIndex(v => v.name === newTodo) === -1) {\n                            setTodos(prev => prev.concat({name: newTodo, checked: false}));\n                        } else {\n                            setError(\"Такое дело уже есть\")\n                        }\n                    }} style={{\n                        backgroundColor: \"#3a62fb\"\n                    }}>+</Button>\n                </InputGroupAddon>\n            </InputGroup>\n            {error && <span style={{\n                color: \"red\",\n                fontSize: \"12px\"\n            }}>{error}</span>}\n            <div style={{\n                marginTop: \"10px\"\n            }}>\n                {\n                    todos.sort((a, b) => {\n                        if (!a.checked && b.checked) {\n                            return 1;\n                        }\n                        if (a.checked && !b.checked) {\n                            return -1;\n                        }\n                        return a.name.localeCompare(b.name);\n                    }).map((t, i) => (<div style={{\n                        display: \"grid\",\n                        justifyItems: \"center\",\n                        alignItems: \"center\",\n                        gridTemplateColumns: \"50px auto 50px 50px\",\n                        width: \"100%\",\n                        minHeight: \"80px\",\n                        borderBottom: \"1px solid rgb(0, 0, 0, 0.2)\",\n                        borderTop: \"1px solid rgb(0, 0, 0, 0.2)\"\n                    }}>\n                        <div className={\"round\"} style={{justifySelf: \"flex-start\"}}>\n                            <input checked={t.checked}\n                                   onChangeCapture={() => setTodos(prev => prev.map((k, index) => k.name === t.name ? {\n                                       ...k,\n                                       checked: !k.checked\n                                   } : k))} id={`${i}`} type={\"checkbox\"}/>\n                            <label htmlFor={`${i}`}></label>\n                        </div>\n                        {\n                            t.name === edit ? <Input placeholder={\"Введите новое значение\"} value={editValue}\n                                                     onChange={(e) => {\n                                                         if (e.target.value.length < 20) {\n                                                             setEditValue(e.target.value)\n                                                         }\n                                                     }}/> :\n                                <div>{t.name}</div>\n                        }\n                        {\n                            t.name === edit ? <ApproveButton approve={() => {\n                                setTodos(prev => prev.map((k, index) => k.name === t.name ? {\n                                    ...k,\n                                    name: editValue\n                                } : k));\n                                setEdit(null);\n                            }}/> : <EditButton edit={() => setEdit(t.name)}/>\n                        }\n                        <Button close onClick={() => {\n                            if (t.name === edit) {\n                                setEdit(null);\n                                setEditValue(\"\");\n                            } else {\n                                setTodos(prev => prev.filter(k => k.name !== t.name));\n                            }\n                        }\n                        }/>\n                    </div>))\n                }\n            </div>\n        </Container>\n    );\n}\n\nconst EditButton = ({edit}) => {\n    const [hover, setHover] = useState(false);\n\n    return (<svg version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\"\n                 x=\"0px\" y=\"0px\"\n                 width={\"40%\"}\n                 height={\"40%\"}\n                 viewBox=\"0 0 348.882 348.882\">\n        <g opacity={hover ? \"1\" : \"0.7\"} onClick={() => edit()} onMouseEnter={() => setHover(true)}\n           onMouseLeave={() => setHover(false)}>\n            <path d=\"M333.988,11.758l-0.42-0.383C325.538,4.04,315.129,0,304.258,0c-12.187,0-23.888,5.159-32.104,14.153L116.803,184.231\n\t\tc-1.416,1.55-2.49,3.379-3.154,5.37l-18.267,54.762c-2.112,6.331-1.052,13.333,2.835,18.729c3.918,5.438,10.23,8.685,16.886,8.685\n\t\tc0,0,0.001,0,0.001,0c2.879,0,5.693-0.592,8.362-1.76l52.89-23.138c1.923-0.841,3.648-2.076,5.063-3.626L336.771,73.176\n\t\tC352.937,55.479,351.69,27.929,333.988,11.758z M130.381,234.247l10.719-32.134l0.904-0.99l20.316,18.556l-0.904,0.99\n\t\tL130.381,234.247z M314.621,52.943L182.553,197.53l-20.316-18.556L294.305,34.386c2.583-2.828,6.118-4.386,9.954-4.386\n\t\tc3.365,0,6.588,1.252,9.082,3.53l0.419,0.383C319.244,38.922,319.63,47.459,314.621,52.943z\"/>\n            <path d=\"M303.85,138.388c-8.284,0-15,6.716-15,15v127.347c0,21.034-17.113,38.147-38.147,38.147H68.904\n\t\tc-21.035,0-38.147-17.113-38.147-38.147V100.413c0-21.034,17.113-38.147,38.147-38.147h131.587c8.284,0,15-6.716,15-15\n\t\ts-6.716-15-15-15H68.904c-37.577,0-68.147,30.571-68.147,68.147v180.321c0,37.576,30.571,68.147,68.147,68.147h181.798\n\t\tc37.576,0,68.147-30.571,68.147-68.147V153.388C318.85,145.104,312.134,138.388,303.85,138.388z\"/>\n        </g>\n    </svg>)\n}\n\nconst ApproveButton = ({approve}) => {\n    const [hover, setHover] = useState(false);\n\n    return (<svg id=\"Capa_2\" height=\"40%\" viewBox=\"0 0 512 512\" width=\"40%\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g opacity={hover ? \"1\" : \"0.7\"} onClick={() => approve()} onMouseEnter={() => setHover(true)}\n           onMouseLeave={() => setHover(false)}>\n            <path d=\"m450.585 68.552-252.065 252.065-137.105-137.104-61.415 61.415 198.52 198.52 313.48-313.48z\"/>\n        </g>\n    </svg>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}